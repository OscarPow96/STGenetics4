@page "/animal-list"
@using STGenetics.Shared.Models
@using STGenetics.Shared.Services
@using STGenetics4.Pages
@inject IAnimalService AnimalService
@inject NavigationManager Navigation

<h3>Animal List</h3>

<div>
    <input type="text" placeholder="Search by breed" @bind="searchTerm" />
    <button @onclick="FilterAnimals">Filter</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>AnimalId</th>
            <th>Name</th>
            <th>Breed</th>
            <th>BirthDate</th>
            <th>Sex</th>
            <th>Price</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var animal in filteredAnimals.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <tr>
                <td>@animal.AnimalId</td>
                <td>@animal.Name</td>
                <td>@animal.Breed</td>
                <td>@animal.BirthDate.ToShortDateString()</td>
                <td>@animal.Sex</td>
                <td>@animal.Price</td>
                <td>@animal.Status</td>
                <td><button @onclick="() => EditAnimal(animal.AnimalId)">Edit</button></td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button @onclick="GoToCreateAnimal">Add New Animal</button>
</div>

<div>
    <button @onclick="() => ChangePage(-1)" disabled="@IsFirstPage">Previous</button>
    <span>Page @currentPage</span>
    <button @onclick="() => ChangePage(1)" disabled="@IsLastPage">Next</button>
</div>

@code {
    private List<Animal> animals = new List<Animal>();
    private List<Animal> filteredAnimals = new List<Animal>();
    private string searchTerm;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        animals = await AnimalService.GetAnimalsFromJson();
        filteredAnimals = animals;
    }

    private void FilterAnimals()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredAnimals = animals.Where(a => a.Breed.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredAnimals = animals;
        }
        currentPage = 1;
    }

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage >= (animals.Count + pageSize - 1) / pageSize;

    private void ChangePage(int direction)
    {
        currentPage += direction;
    }

    private void EditAnimal(int animalId)
    {
        Navigation.NavigateTo($"/animal-form/{animalId}");
    }

    private void GoToCreateAnimal()
    {
        Navigation.NavigateTo("/animal-form/new");
    }
}
